// poj1753.cpp : traditional fliping game.
//

#include <iostream>
using namespace std;

int digit[6][6];//4*4
int flag, step;
//int go[4][2]={1,0,-1,0,0,1,0,-1};
int r[] = { -1,1,0,0,0 };//便于翻棋操作
int c[] = { 0,0,-1,1,0 };
//判断是否颜色已经完全一样
bool Judge(void)
{
	for (int i = 1; i < 5; i++)
		for (int j = 1; j < 5; j++)
			if (digit[i][j] != digit[1][1])
				return false;
	return true;
}
//对棋子及其周边的棋子进行反转
void flip(int row, int col)//翻棋
{
	int i;
	for (i = 0; i < 5; i++)
		digit[row + r[i]][col + c[i]] = !digit[row + r[i]][col + c[i]];
	return;
}

void dfs(int row, int col, int deep)
{
	if (deep == step)
	{
		flag = Judge();
		return;
	}
	if (flag || row == 5)return;

	flip(row, col);       //翻棋
	if (col < 4)
		dfs(row, col + 1, deep + 1);
	else
		dfs(row + 1, 1, deep + 1);

	flip(row, col);      //不符合则翻回来
	if (col < 4)
		dfs(row, col + 1, deep);
	else
		dfs(row + 1, 1, deep);

	return;
}

int main()
{
	char temp;
	int i, j;
	//输入4*4的棋盘
	for (i = 1; i < 5; i++)
		for (j = 1; j < 5; j++)
		{
			cin >> temp;
			if (temp == 'b')
				digit[i][j] = true;//默认false
		}

	for (step = 0; step <= 16; step++)  //对每一步产生的可能性进行枚举
	{                            //至于为什么是16，考虑到4x4=16格，而每一格只有黑白两种情况，则全部的可能性为2^16
		dfs(1, 1, 0);
		if (flag)
			break;
	}

	if (flag)
		cout << step << endl;
	else
		cout << "Impossible" << endl;

	return 0;
}
